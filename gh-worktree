#!/usr/bin/env bash
set -e

RED="\033[0;31m"
GREEN="\033[0;32m"
# YELLOW="\033[0;33m"
CLEAR="\033[0m"

echogreen() {
  printf '\n%b%s%b\n\n' "$GREEN" "$1" "$CLEAR"
}

echored() {
  printf '\n%b%s%b\n\n' "$RED" "$1" "$CLEAR"
}

set_main_branch() {
  # main=$(git branch --list --no-color --no-column --format '%(refname:lstrip=2)' |head -1)
  # main=$(git rev-parse --abbrev-ref origin/HEAD)
  # main="${main#*/}"
  main=$(gh repo view --json defaultBranchRef --jq .defaultBranchRef.name)
}

sub_clone() {
  repo=""
  case "$1" in
    -h|--help|"")
      echo "Clones a repo ready to use worktrees in"
      echo "Usage: gh worktree clone <repository> [<directory>]"
      echo "  repository is OWNER/REPO; omit OWNER/ to default to current user"
      echo "  directory defaults to REPO"
      exit 0
      ;;
    *)
      repo=$1
      ;;
  esac
  directory=""
  if [[ -z "$2" ]] ; then
    directory="${repo#*/}"
  else
    directory="$2"
  fi
  mkdir "$directory"
  cd "$directory"
  gh repo clone "$repo" ./.bare -- --bare
  echo "gitdir: ./.bare" > .git
  set_main_branch
  git worktree add "$main"
  cd ..
}

sub_pr() {
  prnum=""
  case "$1" in
    -h|--help)
      echo "Checks out a PR as a worktree"
      echo "Usage: gh worktree pr <number> [<directory>]"
      echo "  directory defaults to ./pr-<number>"
      exit 0
      ;;
    *)
      prnum="$1"
      ;;
  esac



  if [[ -z "$2" ]] ; then
    directory="./pr-$prnum"
  else
    directory="$2"
  fi
  set_main_branch
  git worktree add --checkout -f "$directory" "$main"
  cd "$directory"
  gh pr checkout "$prnum"
  cd -
}

# Copy on write cross platform
# From https://github.com/llimllib/personal_code/blob/master/homedir/.local/bin/worktree
cp_cow() {
    if ! /bin/cp -Rc "$1" "$2"; then
        if ! /bin/cp -R --reflink "$1" "$2"; then
            if ! /bin/cp -R "$1" "$2"; then
                echo "Unable to copy file $1 to $2 - folder may not exist"
            fi
        fi
    fi
}

update_js() {
  if [[ -f ./yarn.lock ]]; then
    direnv exec . yarn
  elif [[ -f pnpm.lock ]]; then
    direnv exec . pnpm
  elif [[ -f package.lock ]]; then
    direnv exec . npm
  fi
}

sub_add() {
  case "$1" in
    -h|--help)
      echo "Checks out a branch (new or existing) as a worktree"
      echo "Usage: gh worktree add <branch-name> [<directory>]"
      echo "  directory defaults branch name"
      exit 0
      ;;
    *)
      repo=$1
      ;;
  esac

  directory=""
  if [[ -z "$2" ]] ; then
    directory="${repo#*/}"
  else
    directory="$2"
  fi
  set_main_branch

  maindir=$(git worktree list |grep "\[$main\]" |awk '{print $1}')
  echogreen "Updating main branch in $maindir"
  cd "$maindir"
  git pull
  echogreen "Updating js in main branch if it exists"
  update_js


  FLAGS=""

  # Following logic taken from https://github.com/llimllib/personal_code/blob/master/homedir/.local/bin/worktree
  # if the branch exists locally:
    if git for-each-ref --format='%(refname:lstrip=2)' refs/heads | grep -E "^$repo$" > /dev/null 2>&1; then
      FLAGS=""
    # if the branch exists on a remote:
    elif git for-each-ref --format='%(refname:lstrip=3)' refs/remotes/origin | grep -E "^$repo$" > /dev/null 2>&1; then
      FLAGS=""
    else
      # otherwise, create a new branch
      FLAGS="-b"
    fi

  if [[ -f ../HEAD && -f ../packed-refs ]] ; then
    cd ..
  elif [[ -d ../.bare ]] ; then
    cd ..
  fi
  echogreen "Change to worktree parent believed to be $(pwd)"

  echogreen "Adding new worktree with command git worktree add $FLAGS \"$directory\" \"$repo\""
  if ! git worktree add $FLAGS "$directory" "$repo"; then
    echored "ERROR adding worktree"
    exit 1
  fi

  if [ -d "$maindir/node_modules" ]; then
    echogreen "Copying over node_modules dir to new worktree (copy on write)"
    cp_cow "$maindir/node_modules" "$directory/node_modules"
  fi
  if [ -d "$maindir/.direnv" ]; then
    echogreen "Copying over .direnv dir to new worktree (copy on write)"
    cp_cow "$maindir/.direnv" "$directory/.direnv"
  fi
  if [ -f "$directory/.envrc" ]; then
    echogreen "Allowing direnv"
    direnv allow "$directory"
  fi
  cd "$directory"
  echogreen "Updating node_modules in new branch if applicable"
  update_js
}

# Cleanup branches that have been merged in github
# The normal gh-poi extension doesn't work on bare repo-based worktrees
sub_poi() {
  case "$1" in
    -h|--help)
      echo "Inspects local branches to see what might need cleanup; prompts before changes"
      echo "Usage: gh worktree poi"
      exit 0
      ;;
  esac


  allmergedbranches=$(gh pr list -L 200 --state merged --search "status:success" -B main --json headRefName -t '{{range .}}{{.headRefName}}{{"\n"}}{{end}}')
  allactiveworktreebranches=$(git worktree list  |awk '{print $3}' |sed 's/[][]//g')
  alllocalbranches=$(git branch --format '%(refname)' -l |sed 's#refs/heads/##g')
  set_main_branch

  deletecandidates=()
  warnorphans=()
  warnworktrees=()

  # Logic: for each local branch, see if it is in the merged branches list and if it is, make sure it isn't in the activeworktreebranches list and if all that is good, delete it
  # but for now just say what you would do
  for localbranch in $alllocalbranches ; do
    if [[ $localbranch == $main ]]; then
      # skip main/master
      continue
    fi
    ISMERGED="no"
    ISACTIVE="no"
    
    # does github report the branch merged?
    if [[ $allmergedbranches =~ (^|[[:space:]])$localbranch($|[[:space:]]) ]]; then
      ISMERGED="yes"
    fi

    # do we have a worktree with the branch?
    if [[ $allactiveworktreebranches =~ (^|[[:space:]])$localbranch($|[[:space:]]) ]]; then
      ISACTIVE="yes"
    fi

    if [[ "$ISMERGED" == "yes" && "$ISACTIVE" == "no" ]]; then
        deletecandidates+=("$localbranch")
    elif [[ "$ISMERGED" == "yes" && "$ISACTIVE" == "yes" ]]; then
        warnworktrees+=("$localbranch")
    elif [[ "$ISMERGED" == "no" && "$ISACTIVE" == "no" ]]; then
      warnorphans+=("$localbranch")
    fi
  done

  if [[ "${#warnorphans[@]}" -gt 0 ]]; then
    echo "These branches seem to be locally abandoned:"
    echo ""
    echo "${warnorphans[@]}"
    echo ""
  fi

  if [[ "${#warnworktrees[@]}" -gt 0 ]]; then
    echo "These worktrees should likely be removed as their branches have been merged:"
    echo ""
    echo "${warnworktrees[@]}"
    echo ""
  fi

  if [[ "${#deletecandidates[@]}" -gt 0 ]]; then
    echo "These branches have been merged and can be cleaned up:"
    echo ""
    echo "${deletecandidates[@]}"
    echo ""

    read -p "Delete these branches? (y/n): " confirm && [[ $confirm == [yY] || $confirm == [yY][eE][sS] ]] || exit 1

    for dbranch in "${deletecandidates[@]}"; do
      git branch -D "$dbranch"
    done
  fi

}

main_help() {
  echo "Usage: gh worktree <subcommand> [options]"
  echo "Subcommands:"
  echo "    clone     Clone a github repo in a worktree dir"
  echo "    pr        Checkout a PR"
  echo "    add       Create or checkout a branch as a worktree"
  echo "    poi       Cleanup branches that have been merged in github"
  echo ""
  echo "For help with each subcommand run:"
  echo "gh worktree <subcommand> --help"
}

if [[ -z "$1" ]] ; then
    main_help
    exit 0
fi

while [ $# -gt 0 ]; do
  case "$1" in
  clone)
    shift
    sub_clone "$@"
    exit 0
    ;;
  pr)
    shift
    sub_pr "$@"
    exit 0
    ;;
  add)
    shift
    sub_add "$@"
    exit 0
    ;;
  poi)
    shift
    sub_poi "$@"
    exit 0
    ;;
  ""|*)
    main_help
    exit 0
    ;;
  esac
done

